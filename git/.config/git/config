
[alias]
    # Git checkout to a branch using fzf to search for branches
    cob = !git checkout $(git branch | fzf)

    # Select branch to switch to, preview shows last commit
    cb = "!git branch --all | grep -v '^[*+]' | awk '{print $1}' | fzf -0 --preview 'git show --color=always {-1}' | sed 's/remotes\\/origin\\///g' | xargs -r git checkout"

    # Choose stash to apply, preview shows diff
    stash-choose = "!git stash list | fzf -0 --preview 'git show --pretty=oneline --color=always --patch \"$(echo {} | cut -d: -f1)\"' | cut -d: -f1 | xargs -r git stash pop"

    # Delete a stash, preview shows diff
    stash-delete = "!git stash list | fzf -0 --preview 'git show --pretty=oneline --color=always --patch \"$(echo {} | cut -d: -f1)\"' | cut -d: -f1 | xargs -r git stash drop"

    # Delete branches, use <tab> to select multiple, force delete via Db. Preview shows last commit
    branch-delete = "!git branch | grep -v '^[*+]' | awk '{print $1}' | fzf -0 --multi --preview 'git show --color=always {-1}' | xargs -r git branch --delete"

    # Push current local branch to remote with the same name and track it
    push-remote = "!CURRENT=$(git symbolic-ref --short HEAD) && git push -u origin $CURRENT:$CURRENT"

[apply]
    # Detect whitespace errors when applying a patch.
    whitespace = fix

[branch]
    # Show most recently changed branches first.
    sort = -committerdate

[commit]
    gpgsign = true

[core]
    # Use `.gitattributes`. Be careful with existing repo with binary files already checked in as it may re-write history!
    #attributesfile = ~/.gitattributes

    # convert CRLF to LF on commit as we don't want to store CRLF in the repo
    autocrlf = input

    # Make `git rebase` safer on macOS.
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false

	editor = micro

    # Global gitignore file
    excludeFiles = ~/.config/git/ignore

[diff]
    external = difft

[fetch]
    # Delete local branches that have been removed from remote on fetch/pull
    prune = true

[format]
    pretty = format:%C(dim yellow)%h%Creset%C(brightgreen)%d%Creset %C(dim brightblack)- %Creset%C(brightblue)%s  %C(magenta)%an  %C(dim brightblack)(%ar - %ad)  %Creset

[help]
    # Automatically correct and execute mistyped commands.
    autocorrect = 1

[init]
    defaultBranch = main

[log]
    date = format:%x, %I:%M %p

[merge]
    conflictstyle = zdiff3

[mergetool]
    keepBackup = false

[pull]
    rebase = true

[rebase]
    autostash = true

[rerere]
    enabled = true

[push]
    # https://git-scm.com/docs/git-config#git-config-pushdefault
    default = simple
    # Make `git push` push relevant annotated tags when pushing branches out.
    followTags = true
    autoSetupRemote = true

# Code path on personal machine
[includeIf "gitdir:~/Code/**"]
    path = ~/.config/git/personal.inc

# Code path on work machine
[includeIf "gitdir:~/Development/dotfiles/**"]
    path = ~/.config/git/personal.inc

# Code path on work machine
[includeIf "gitdir:~/Development/my-projects/**"]
    path = ~/.config/git/personal.inc

# Code path on work machine
[includeIf "gitdir:~/Development/pc-projects/**"]
    path = ~/.config/git/work.inc

[url "ssh://git@bitbucket.org/"]
	insteadOf = https://bitbucket.org/

[url "ssh://git@github.com/"]
	insteadOf = https://github.com/

[url "ssh://git@gitlab.com/"]
	insteadOf = https://gitlab.com/
